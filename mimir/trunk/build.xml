<project name="mimir" default="all">
  <property file="build.properties" />

  <property name="mimir-core.dir" location="${mimir-core.dirname}" />
  <property name="mimir-client.dir" location="${mimir-client.dirname}" />
  <property name="plugins.dir" location="${plugins.dirname}" />
  <property name="grails-plugin.dir" location="${grails-plugin.dirname}" />
  <property name="grails-demo-webapp.dir"
            location="${grails-demo-webapp.dirname}" />
  
  <property file="mimir-web/application.properties"  prefix="mimir.web." />

  <!-- Load the AntContrib tasks -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
  <classpath>
    <pathelement location="${mimir-core.dir}/lib/ant-contrib-1.0b3.jar"/>
  </classpath>
  </taskdef>
  
  <!-- Location of your grails binary - override this in build.properties if
  grails is not on your path -->
  <property name="grails.bin" value="grails" />

  <!-- Grails is a .bat file on Windows, which has to be run in an ant <exec>
  using cmd.exe /c, so need to detect the OS and set up the <exec>
  appropriately. -->
  <target name="detect.os">
    <condition property="running.on.windows">
      <os family="winnt" />
    </condition>
  </target>

  <target name="grails.command.win" if="running.on.windows">
    <echo>Detected Windows operating system</echo>
    <macrodef name="grails">
      <element name="extraargs" implicit="true" />
      <attribute name="dir" />
      <sequential>
        <exec executable="cmd.exe" dir="@{dir}" failonerror="true">
          <arg value="/c" />
          <arg value="${grails.bin}" />
          <extraargs />
        </exec>
      </sequential>
    </macrodef>
  </target>

  <target name="grails.command.notwin" unless="running.on.windows">
    <echo>Detected non-Windows operating system</echo>
    <macrodef name="grails">
      <element name="extraargs" implicit="true" />
      <attribute name="dir" />
      <sequential>
        <exec executable="${grails.bin}" dir="@{dir}" failonerror="true">
          <extraargs />
        </exec>
      </sequential>
    </macrodef>
  </target>

  <target name="grails.command" depends="detect.os, grails.command.win, grails.command.notwin" />

  <target name="core">
    <ant dir="${mimir-core.dir}" target="publish" />
    <ant dir="${mimir-client.dir}" target="publish" />
  </target>

  <target name="plugins">
    <ant dir="${plugins.dir}/db-h2" target="jar" />
    <ant dir="${plugins.dir}/sesame" target="jar" />
    <ant dir="${plugins.dir}/measurements" target="jar" />
    <ant dir="${plugins.dir}/sparql" target="jar" />
  </target>

  <target name="grails-plugin" depends="grails.command">
  	<!-- Update the version for the mimir-web plugin -->
    <copy file="${grails-plugin.dir}/MimirWebGrailsPlugin.groovy.template" 
    	    tofile="${grails-plugin.dir}/MimirWebGrailsPlugin.groovy"
          overwrite="true" >
      <filterset>
        <filter token="version" value="${app.version}" />
      </filterset>
    </copy>
  	
  	
  	
    <!-- The first compile always fails due to GWT classes being added to the
    classpath too late. When that happens, we need to run compile a second time.
    -->
    <trycatch>
      <try>
        <grails dir="${grails-plugin.dir}">
          <arg value="compile" />
        </grails>      
      </try>
      <catch>
        <echo>First Grails compilation failed (GWT not on the classpath?); re-trying...</echo>
        <grails dir="${grails-plugin.dir}">
          <arg value="compile" />
        </grails>      
      </catch>
    </trycatch>
    
    <grails dir="${grails-plugin.dir}">
      <arg value="compile-gwt-modules" />
    </grails>
  </target>

  <target name="check-demo-app">
    <!-- If the directory already exists, exit -->
    <available property="app-exists" file="${grails-demo-webapp.dir}" />  
  </target>
  
  <target name="fail-if-exists" if="app-exists" depends="check-demo-app">
<echo>===========================================================

Target directory already exists:
  ${grails-demo-webapp.dir}	
Please delete/move it manually and try again!

===========================================================</echo>
    <fail message="Application already exists."/>
  </target>
  
  <target name="mimir-demo" depends="grails.command, fail-if-exists">
    <echo>This will create a new Grails application at ${grails-demo-webapp.dir}...</echo>

    <grails dir="${grails-plugin.dir}">
      <arg value="package-plugin" />
    </grails>
    
    <xmlproperty prefix="mimir.web" file="${grails-plugin.dir}/plugin.xml" />
  	
    <grails dir=".">
      <arg value="create-app" />
      <arg value="${grails-demo-webapp.name}" />
    </grails>
    
  	<echo file="${grails-demo-webapp.dir}/grails-app/conf/UrlMappings.groovy"
  	    >class UrlMappings { static mappings = {} }</echo>
  	
  	<grails dir="${grails-demo-webapp.dir}">
      <arg value="clean" />
    </grails>
    
  	<grails dir="${grails-demo-webapp.dir}">
      <arg value="set-version" />
      <arg value="${app.version}" />
    </grails>
    	
    <grails dir="${grails-demo-webapp.dir}">
      <arg value="install-plugin" />
      <arg file="${grails-plugin.dir}/grails-${mimir.web.plugin(name)}-${mimir.web.plugin(version)}.zip" />
    </grails>
    
    <!-- The first compile always fails due to GWT classes being added to the
    classpath too late. When that happens, we need to run compile a second time.
    -->
    <trycatch>
      <try>
      <grails dir="${grails-demo-webapp.dir}">
        <arg value="compile" />
      </grails>
    </try>
      <catch>
        <echo>First Grails compilation failed (GWT not on the classpath?); re-trying...</echo>
        <grails dir="${grails-demo-webapp.dir}">
          <arg value="compile" />
        </grails>
      </catch>
    </trycatch>

    <echo>
    A new Grails application was created at ${grails-demo-webapp.name}.
    Please edit the configuration according to your local set-up (see in
    particular /grails-app/conf/MimirConfig.groovy). Check the user manual (in
    doc/mimir-guide.pdf) for details of what the various configuration options
    mean.</echo>
  </target>  
  
  <target name="all" depends="core, plugins, grails-plugin" />

  <target name="clean" depends="grails.command">
    <ant dir="${mimir-core.dir}" target="clean" />
    <ant dir="${mimir-client.dir}" target="clean" />
    <ant dir="${plugins.dir}/db-h2" target="clean" />
    <ant dir="${plugins.dir}/sesame" target="clean" />
    <ant dir="${plugins.dir}/measurements" target="clean" />
    <ant dir="${plugins.dir}/sparql" target="clean" />
    <grails dir="${grails-plugin.dir}">
      <arg value="clean" />
    </grails>
    <delete>
      <fileset dir="${grails-plugin.dir}/lib" includes="**/*" />
    </delete>
  	<delete>
  	  <fileset dir="${grails-plugin.dir}" includes="grails-${grails-plugin.name}-*.zip" />
  	</delete>
  </target>
</project>
